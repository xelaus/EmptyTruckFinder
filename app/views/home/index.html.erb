

<style>

    
      #map {
        height: 550px;
      }
      .controls {
        margin-top: 10px;
        border: 1px solid transparent;
        border-radius: 2px 0 0 2px;
        box-sizing: border-box;
        -moz-box-sizing: border-box;
        height: 32px;
        outline: none;
        box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
      }

      #origin-input,
      #destination-input {
        background-color: #fff;
        font-size: 15px;
        font-weight: 300;
        margin-left: 12px;
        padding: 0 11px 0 13px;
        text-overflow: ellipsis;
        width: 200px;
      }

      #origin-input:focus,
      #destination-input:focus {
        border-color: #4d90fe;
      }

      #mode-selector {
        color: #fff;
        background-color: #4d90fe;
        margin-left: 12px;
        padding: 5px 11px 0px 11px;
        position: fixed;
        display: none;
      }

      #mode-selector label {
        font-size: 13px;
        font-weight: 300;
      }

    
</style>



<p>Welcome, <%= @current_user.company_name %></p>
<p>You are logged in as; <%= @current_user.email %></p>


<h1>Create a truck posting</h1>


<div id="login_msg_green">
    <% if session[:msg_truck_posting] %>
        <%= session[:msg_truck_posting] %>
        <% session.delete(:msg_truck_posting) %>  
    <% end %>
</div>


<%= form_for(@truck) do |f| %>  
  <div class="field" id="truck_form_hidden"> 
      <%= f.text_field(:from_loc, placeholder: 'From', id: 'from_loc') %> 
      <%= f.text_field(:from_country, placeholder: 'From Country', id: 'from_country') %> 
      
      <%= f.text_field(:to_loc, placeholder: 'To', id: 'to_loc') %> 
      <%= f.text_field(:to_country, placeholder: 'To Country', id: 'to_country') %>
      
      <%= f.text_field(:distance, placeholder: 'Distance', id: 'distance') %> 
      <%= f.text_field(:duration, placeholder: 'Duration', id: 'duration') %> 
      
      <%= f.text_field(:company_name, placeholder: 'Company Name', id: 'company_name', :value => @current_user.company_name) %> 
  </div> 




 
    <input id="origin-input" class="controls" type="text"
        placeholder="Enter an origin location">

    <input id="destination-input" class="controls" type="text"
        placeholder="Enter a destination location">

    <div id="mode-selector" class="controls">
      <input type="radio" name="type" id="changemode-walking" >
      <label for="changemode-walking">Walking</label>

      <input type="radio" name="type" id="changemode-transit">
      <label for="changemode-transit">Transit</label>

      <input type="radio" name="type" id="changemode-driving">
      <label for="changemode-driving" checked="checked">Driving</label>
    </div>

<div id="map"></div>

  <div class="actions"> 
        <div id="btn-truck-create" draggable="true" class="btn-truck">
            <p>Create</p> 
        </div>
        <div id="btn-truck-search" draggable="true" class="btn-truck">
            <p>Search</p> 
        </div>
      <%= f.submit "Create", name: "create", id: "btn-truck-hidden-create" %> 
      <%= f.submit "Search", name: "search", id: "btn-truck-hidden-search" %> 
  </div> 
<% end %>

<div>
    <p>info in maps</p>
    <div id="maps_info"></div>
     <div id="maps_distance"></div>
</div>

<script>
      // This example requires the Places library. Include the libraries=places
      // parameter when you first load the API. For example:
      // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

      function initMap() {
          var from;
          var to;
        var origin_place_id = null;
        var destination_place_id = null;
        var travel_mode = google.maps.TravelMode.DRIVING;
        var map = new google.maps.Map(document.getElementById('map'), {
          mapTypeControl: false,
          center: {lat: 38.9637, lng: 35.2433},
          zoom: 5
        });
        var directionsService = new google.maps.DirectionsService;
        var directionsDisplay = new google.maps.DirectionsRenderer;
        directionsDisplay.setMap(map);

        var origin_input = document.getElementById('origin-input');
        var destination_input = document.getElementById('destination-input');
        var modes = document.getElementById('mode-selector');

        map.controls[google.maps.ControlPosition.TOP_LEFT].push(origin_input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(destination_input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(modes);

        var origin_autocomplete = new google.maps.places.Autocomplete(origin_input);
        origin_autocomplete.bindTo('bounds', map);
        var destination_autocomplete =
            new google.maps.places.Autocomplete(destination_input);
        destination_autocomplete.bindTo('bounds', map);

        // Sets a listener on a radio button to change the filter type on Places
        // Autocomplete.
        function setupClickListener(id, mode) {
          var radioButton = document.getElementById(id);
          radioButton.addEventListener('click', function() {
            travel_mode = mode;
          });
        }
        setupClickListener('changemode-walking', google.maps.TravelMode.WALKING);
        setupClickListener('changemode-transit', google.maps.TravelMode.TRANSIT);
        setupClickListener('changemode-driving', google.maps.TravelMode.DRIVING);

        function expandViewportToFitPlace(map, place) {
          if (place.geometry.viewport) {
            map.fitBounds(place.geometry.viewport);
          } else {
            map.setCenter(place.geometry.location);
            map.setZoom(17);
          }
        }

        origin_autocomplete.addListener('place_changed', function() {
          var place = origin_autocomplete.getPlace();
         
          if (!place.geometry) {
            //window.alert("Autocomplete's returned place contains no geometry");
            return;
          }
          expandViewportToFitPlace(map, place);
            from = place;    
          // If the place has a geometry, store its place ID and route if we have
          // the other place ID
          origin_place_id = place.place_id;
          route(origin_place_id, destination_place_id, travel_mode,
                directionsService, directionsDisplay);
        });

        destination_autocomplete.addListener('place_changed', function() {
          var place = destination_autocomplete.getPlace();
              
          if (!place.geometry) {
            window.alert("Autocomplete's returned place contains no geometry");
            return;
          }
          expandViewportToFitPlace(map, place);
         to = place;
            
            //console.log(place.geometry.location.lng);
            
          // If the place has a geometry, store its place ID and route if we have
          // the other place ID
          destination_place_id = place.place_id;
          route(origin_place_id, destination_place_id, travel_mode,
                directionsService, directionsDisplay);
        });
          
        function addToForm(from,to){
            document.getElementById("from_loc").value = from.formatted_address;
            document.getElementById("to_loc").value = to.formatted_address;
            
            document.getElementById("from_country").value = from.address_components[from.address_components.length -1].short_name;
            document.getElementById("to_country").value = to.address_components[to.address_components.length -1].short_name;
            
            console.log(to);
            console.log(from.address_components[from.address_components.length -1].short_name);
            console.log(to.address_components[to.address_components.length -1].short_name);
        }

        function printInfo(from,to){

            
               
                var distanceService = new google.maps.DistanceMatrixService();
                distanceService.getDistanceMatrix({
                    origins: [from],
                    destinations: [to],
                    travelMode: google.maps.TravelMode.DRIVING,
                    unitSystem: google.maps.UnitSystem.METRIC,
                    durationInTraffic: false,
                    avoidHighways: false,
                    avoidTolls: false
                },
                function (response, status) {
                    if (status !== google.maps.DistanceMatrixStatus.OK) {
                        console.log('Error:', status);
                    } else {
                        console.log(response);
                        //var obj = jQuery.parseJSON( response);
                        var result = response.rows[0].elements;
                        console.log( result[0].distance.value );
                        
                        $("#maps_distance").append('Duration: ' + result[0].duration.value);
                        $("#maps_distance").append('Distance: ' + result[0].distance.value);
                        document.getElementById("distance").value = result[0].distance.value;
                        document.getElementById("duration").value = result[0].duration.value;
                    }
                });
            
                //console.log(distance + " outside");

                //console.log(items);
                console.log("LOL");
                //console.log(data);
            
        }

        function route(origin_place_id, destination_place_id, travel_mode,
                       directionsService, directionsDisplay) {
          if (!origin_place_id || !destination_place_id) {
            return;
          }
          directionsService.route({
            origin: {'placeId': origin_place_id},
            destination: {'placeId': destination_place_id},
            travelMode: travel_mode
          }, function(response, status) {
            if (status === google.maps.DirectionsStatus.OK) {
              directionsDisplay.setDirections(response);
                 document.getElementById('maps_info').innerHTML += from.formatted_address + " to " + to.formatted_address;
                addToForm(from,to);
                printInfo(from.formatted_address,to.formatted_address);
            } else {
              window.alert('Directions request failed due to ' + status);
            }
          });
        }
      }
    
    $( "#btn-truck-create" ).click(function() {
        if($("#from_loc").val() == "" || $("#to_loc").val() == ""  ){
            alert("Please enter valid locations!");
        }
        else{
            $("#btn-truck-hidden-create").click();
        }
        
        
    });
    
    
    $( "#btn-truck-search" ).click(function() {
        if($("#from_loc").val() == "" || $("#to_loc").val() == ""  ){
            alert("Please enter valid locations!");
        }
        else{
            $("#btn-truck-hidden-search").click();
        }
        
        
    });
    
   
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDHyweeenexp-lJjaSVVXFAEv-yhTmwpZA&libraries=places&callback=initMap"
        async defer></script>